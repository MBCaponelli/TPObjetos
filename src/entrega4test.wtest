import guitarras.*
import albums.*
import Canciones.*
import presentaciones.*
import cantantes.*
import bandas.*
 
describe "entrega4"
{
	const joaquin
	const laFamilia
	const especialLaFamilia
	const kike
	const corazonAmericano
	const eres
	const lucia
	const elEternoRetorno
	const pimpisole
	const cachorro
	const soledad
	const laSole
	const felix
	const presentacionPrixDAmi
	const presentacionLaCueva
	fixture {
		
		
		lucia= new VocalistaPopular(solista,70,[],new Palabrero("familia"),new CobroPorCapacidad(500,5000))
		
		cachorro= new Representante("cachorro",1982)
		
	    laSole= new Album("La Sole",[eres,corazonAmericano],new Date(04,02,2005),200000,130000)
	    soledad= new VocalistaPopular(solista,55,[laSole],new Palabrero("amor"),new CobroPorCantantes(6000))
		
		
		
		felix = new Representante("felix",500)
		
		kike= new DeGrupo(pimpinela,60,[],new Imparero(),new CobroPorExpectativaInflacionaria(4000,new Date(08,01,2018),0.5),0)
		
		elEternoRetorno = new Banda([luisAlberto,kike],felix)
		
		laFamilia= new Cancion("La Familia", 264, "Quiero brindar por mi gente sencilla, por el amor brindo por la familia")
       
        especialLaFamilia= new Album("Especial La Familia",[laFamilia],new Date(17,06,1992),100000,89000)
       
        joaquin = new DeGrupo(pimpinela,25,[especialLaFamilia],new Larguero(300),new CobroPorCantantes(100),0)
        
        corazonAmericano= new Cancion("Corazón Americano",154,"Canta corazón, canta mas alto, que tu pena al fin se va marchando, el nuevo milenio ha de encontrarnos, junto corazón, como soñamos.")
	    
	    eres= new Cancion("Eres",145,"Eres lo mejor que me pasó en la vida, no tengo duda, no habrá más nada después de ti. Eres lo que le dio brillo al día a día, y así será por siempre, no cambiará, hasta el final de mis días.")
	   
	   
	   
	    pimpisole = new Banda([joaquin, lucia ,soledad],cachorro)
	    presentacionPrixDAmi = new Presentacion([joaquin,soledad,elEternoRetorno], prixDAmi, new Date(30,06,2017))
	   
	    presentacionLaCueva = new Presentacion([pimpisole], laCueva, new Date(05,01,2018))
	}
	
	test " Joaquín canta bien la canción “La Familia”" {
    joaquin.categoria(new Imparero())
	assert.that(joaquin.interpretaBien(laFamilia))
   }
   
   test " Joaquín canta mal la canción “Cisne” por par "{
   	joaquin.categoria(new Imparero())
   	joaquin.habilidadBase(0)
   	assert.notThat(joaquin.interpretaBien(cisne))
   }
   
   test "si kike canta bien las canciones “Corazon americano,alma de diamante,eres ,crisantemo” "{
   	kike.categoria(new Palabrero("de"))
   	kike.habilidadBase(0)
   	assert.equals(kike.interpretaBienDeLaListaDeCanciones([corazonAmericano,cisne,almaDeDiamante,laFamilia,eres,aliciaEnElPais,crisantemo]).map({cancion =>cancion.nombre()}),["Corazón Americano","Alma de diamante","Eres","Crisantemo"])
   }
   
   test "si joaquin canta bien las canciones “Cisne,La Familia,Cancion de Alicia en el Pais” "{
   	joaquin.habilidadBase(0)
   	
   	assert.equals(joaquin.interpretaBienDeLaListaDeCanciones([corazonAmericano,cisne,almaDeDiamante,laFamilia,eres,aliciaEnElPais,crisantemo]).map({cancion =>cancion.nombre()}),["Cisne","La Familia","Cancion de Alicia en el Pais"])
   }
   
   test "si joaquin canta bien las canciones “La Familia” porque su palabra es Xilofon "{
   	joaquin.habilidadBase(0)
   	joaquin.categoria(new Palabrero("xilofon"))
   	assert.equals(joaquin.interpretaBienDeLaListaDeCanciones([corazonAmericano,cisne,almaDeDiamante,laFamilia,eres,aliciaEnElPais,crisantemo]).map({cancion =>cancion.nombre()}),["La Familia"])
   }
   test "si lucia canta bien las canciones “Eres y Crisantemo”  "{
   	lucia.habilidadBase(0)
   	lucia.categoria(new Imparero())
   	assert.equals(lucia.interpretaBienDeLaListaDeCanciones([corazonAmericano,cisne,almaDeDiamante,laFamilia,eres,aliciaEnElPais,crisantemo]).map({cancion =>cancion.nombre()}),["Eres","Crisantemo"])
   }
   test "joaquin cobra 1.200 (30/06/2017 es la presentación que supera a 02/2017)"{
   joaquin.formaDeCobro(new CobroPorExpectativaInflacionaria(1000,new Date(01,02,2017),0.20))
   assert.equals(joaquin.cobrar(presentacionPrixDAmi),1200)
   }
   test "joaquin cobra 1.000 (24/01/2017 es anterior a febrero 2017)"{
   presentacionPrixDAmi.fecha(new Date(24,01,2017))
   joaquin.formaDeCobro(new CobroPorExpectativaInflacionaria(1000,new Date(01,02,2017),0.20))
   assert.equals(joaquin.cobrar(presentacionPrixDAmi),1000)
   }
   test "joaquin cobra 50 por prixDAmi"{
   	assert.equals(joaquin.cobrar(presentacionPrixDAmi),50)
   }
   test "joaquin cobra 2400 por prixDAmi cambiando su cobro"{
   	joaquin.formaDeCobro(new CobroPorCapacidad(2500,13000))
   	assert.equals(joaquin.cobrar(presentacionPrixDAmi),2400)
   }
   test "joaquin cobra 2500 por laCueva cambiando su cobro"{
   	joaquin.formaDeCobro(new CobroPorCapacidad(2500,13000))
   	assert.equals(joaquin.cobrar(presentacionLaCueva),2500)
   }
   test "el eterno retorno cobra 5500 por Prix D Ami"{
   	
   	assert.equals(elEternoRetorno.cobrar(presentacionPrixDAmi),5500)
   }
    test "el show prix d ami cuesta 8550 "{
   	
   	assert.equals(presentacionPrixDAmi.costo(),8550)
   }
   test "el show la Cueva cuesta 8582 "{
   	
   	assert.equals(presentacionLaCueva.costo(),8582)
   }
   test "la habilidad del eterno retorno es 154"{
     	
     	assert.equals(elEternoRetorno.habilidad(),154)
     }
   test "el show prix d ami es magico en 234"{
   	
   	assert.equals(presentacionPrixDAmi.magia(),234)
   }
    test "pimpisole interpreta mal cisne"{
   	
   	assert.notThat(soledad.interpretaBien(cisne))
   }
   test "el etero retorno interpreta bien crisantemo"{
   	
   	assert.that(elEternoRetorno.interpretaBien(crisantemo))
   }
}